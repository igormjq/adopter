directive @hasRole(
  role: String
) on OBJECT | FIELD_DEFINITION

directive @auth on FIELD_DEFINITION

type Query {
  users: [User!]!
  user(id: ID!): User!
  animals: [Animal!]!
  roles: [Role!]!
}

type Mutation {
  login(data: LoginInput): AuthPayload!
  createUser(data: CreateUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User! @auth
  deleteUser: User! @auth
  createRole(data: CreateRoleInput!): Role! @hasRole(role: "ADMIN")
  createAnimal(data: CreateAnimalInput!): Animal! @auth
  updateAnimal(id: ID!, data: UpdateAnimalInput!): Animal! @auth
  deleteAnimal(id: ID!): Animal! @auth
  likeAnimal(animalId: ID!): SuccessRequest! @auth
}

# USER
type User {
  id: ID!
  email: String!
  password: String
  name: String!
  profileImg: String
  cpf: String
  cnpj: String
  phone: String!
  address: Address!
  animals: [Animal!]!
  favoriteAnimals: [Animal!]!
  adoptionRequests: [AdoptionRequest!]!
  role: Role!
}

type Role {
  id: ID!
  name: String!
  displayName: String!
}

type Address {
  id: ID!
  street: String!
  number: String!
  district: String!
  complement: String
  uf: String!
  city: String!
  lat: String
  lng: String
}

type AuthPayload {
  token: String!
  user: User!
}

type Animal {
  id: ID!
  owner: User!
  name: String!
  type: AnimalType!
  size: AnimalSize!
  gender: AnimalGender
  castrated: Boolean
  vaccinated: Boolean
  available: Boolean
  about: String!
  profileImg: String
  photos: String
  likedBy: [User!]!
  requestedIn: [AdoptionRequest!]!
}

type AdoptionRequest {
  id: ID!
  animal: Animal!
  sentBy: User!
  accepted: Boolean!
}

type SuccessRequest {
  success: Boolean
}

# INPUTS

input CreateUserInput {
  email: String!
  password: String!
  name: String!
  cpf: String
  cnpj: String
  phone: String
  address: AddressInput
  role: UserRole!
}

input UpdateUserInput {
  email: String
  password: String
  name: String
  cpf: String
  cnpj: String
  phone: String
  address: String
}

input AddressInput {
  street: String!
  number: String!
  district: String!
  complement: String
  uf: String!
  city: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateRoleInput {
  name: String!
  displayName: String!
}

input CreateAnimalInput {
  name: String!
  type: AnimalType!
  size: AnimalSize!
  gender: AnimalGender
  castrated: Boolean
  vaccinated: Boolean
  about: String!
  photos: PhotoInput
}

input PhotoInput {
  data: [String]
}

type Photo {
  data: [String]
}

input UpdateAnimalInput {
  name: String
  size: AnimalSize
  gender: AnimalGender
  castrated: Boolean
  vaccinated: Boolean
  about: String
}

# ENUM
enum AnimalType { 
  DOG
  CAT
}

enum AnimalGender {
  MALE
  FEMALE
}

enum AnimalSize {
  SMALL
  MEDIUM
  LARGE
}

enum UserRole {
  PERSON,
  INSTITUTION
}
