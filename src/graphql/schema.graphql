directive @requires(
  permission: String
) on OBJECT | FIELD_DEFINITION

directive @auth on FIELD_DEFINITION

type Query {
  users: [User!]!
  user(id: ID!): User!
  animals: [Animal!]!
  roles: [Role!]!
}

type Mutation {
  login(data: LoginInput): AuthPayload!
  createUser(data: CreateUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User! @auth
  deleteUser: User! @auth
  createRole(data: CreateRoleInput!): Role!
}

# USER

type User {
  id: ID!
  email: String!
  password: String
  name: String!
  cpf: String
  cnpj: String
  phone: String!
  address: String!
  animals: [Animal!]!
  favoriteAnimals: [Animal!]!
  adoptionRequests: [AdoptionRequest!]!
  role: Role
}

type Role {
  id: ID!
  name: String!
  displayName: String!
  permissions: [Permissions!]!
}

type Permissions {
  id: ID!
  name: String!
  displayName: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Animal {
  id: ID!
  owner: User!
  name: String!
  type: AnimalType!
  size: AnimalSize!
  gender: AnimalGender
  castrated: Boolean
  vaccinated: Boolean
  available: Boolean
  about: String!
  likedBy: [User!]!
  requestedIn: [AdoptionRequest!]!
}

type AdoptionRequest {
  id: ID!
  animal: Animal!
  sentBy: User!
  accepted: Boolean!
}

# INPUTS

input CreateUserInput {
  email: String!
  password: String!
  name: String!
  cpf: String
  cnpj: String
  phone: String
  address: String
  role: RolesEnum!
}

input UpdateUserInput {
  email: String
  password: String
  name: String
  cpf: String
  cnpj: String
  phone: String
  address: String
}

input LoginInput {
  email: String!
  password: String!
}

input CreateRoleInput {
  name: String!
  displayName: String!
  permissions: [String!]!
}

# ENUM
enum AnimalType { 
  DOG
  CAT
}

enum AnimalGender {
  MALE
  FEMALE
}

enum AnimalSize {
  EXTRA_SMALL
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum RolesEnum {
  ADMIN
  INSTITUTION
  PERSON
}
